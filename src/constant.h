#pragma once

// --------------------------------- Constants --------------------------------- //

// Boolean Type for Vanilla C
typedef int bool;
#define true 1
#define false 0

// Display
static const char SCREEN_WIDTH    = 64;
static const char SCREEN_HEIGHT   = 32;
static const char SCALE           = 10;
static const int  PIXEL_ON_COLOR   = 0xFFFFFFFF;
static const int  PIXEL_OFF_COLOR  = 0xFF000000;

static const char Chip8Fontset[80] = { \
	0xF0, 0x90, 0x90, 0x90, 0xF0,// 0
	0x20, 0x60, 0x20, 0x20, 0x70,// 1
	0xF0, 0x10, 0xF0, 0x80, 0xF0,// 2
	0xF0, 0x10, 0xF0, 0x10, 0xF0,// 3
	0x90, 0x90, 0xF0, 0x10, 0x10,// 4
	0xF0, 0x80, 0xF0, 0x10, 0xF0,// 5
	0xF0, 0x80, 0xF0, 0x90, 0xF0,// 6
	0xF0, 0x10, 0x20, 0x40, 0x40,// 7
	0xF0, 0x90, 0xF0, 0x90, 0xF0,// 8
	0xF0, 0x90, 0xF0, 0x10, 0xF0,// 9
	0xF0, 0x90, 0xF0, 0x90, 0x90,// A
	0xE0, 0x90, 0xE0, 0x90, 0xE0,// B
	0xF0, 0x80, 0x80, 0x80, 0xF0,// C
	0xE0, 0x90, 0x90, 0x90, 0xE0,// D
	0xF0, 0x80, 0xF0, 0x80, 0xF0,// E
	0xF0, 0x80, 0xF0, 0x80, 0x80  // F
}; // 8 columns (bits) per 5 lines sprites


static const char SCHIPFontset[160] = {  \
	0xff, 0xff, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xff, 0xff, // 0
	0x18, 0x78, 0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0xff, // 1
	0xff, 0xff, 0x03, 0x03, 0xff, 0xff, 0xc0, 0xc0, 0xff, 0xff, // 2
	0xff, 0xff, 0x03, 0x03, 0xff, 0xff, 0x03, 0x03, 0xff, 0xff, // 3
	0xc3, 0xc3, 0xc3, 0xc3, 0xff, 0xff, 0x03, 0x03, 0x03, 0x03, // 4
	0xff, 0xff, 0xc0, 0xc0, 0xff, 0xff, 0x03, 0x03, 0xff, 0xff, // 5
	0xff, 0xff, 0xc0, 0xc0, 0xff, 0xff, 0xc3, 0xc3, 0xff, 0xff, // 6
	0xff, 0xff, 0x03, 0x03, 0x06, 0x0c, 0x18, 0x18, 0x18, 0x18, // 7
	0xff, 0xff, 0xc3, 0xc3, 0xff, 0xff, 0xc3, 0xc3, 0xff, 0xff, // 8
	0xff, 0xff, 0xc3, 0xc3, 0xff, 0xff, 0x03, 0x03, 0xff, 0xff, // 9
	0x7e, 0xff, 0xc3, 0xc3, 0xc3, 0xff, 0xff, 0xc3, 0xc3, 0xc3, // A
	0xfc, 0xfc, 0xc3, 0xc3, 0xfc, 0xfc, 0xc3, 0xc3, 0xfc, 0xfc, // B
	0x3c, 0xff, 0xc3, 0xc0, 0xc0, 0xc0, 0xc0, 0xc3, 0xff, 0x3c, // C
	0xfc, 0xfe, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xfe, 0xfc, // D
	0xff, 0xff, 0xc0, 0xc0, 0xff, 0xff, 0xc0, 0xc0, 0xff, 0xff, // E
	0xff, 0xff, 0xc0, 0xc0, 0xff, 0xff, 0xc0, 0xc0, 0xc0, 0xc0  // F
}; // 8 columns (bits) per 10 lines sprites


// --------------------------------- Variables --------------------------------- //

unsigned int pixels[SCREEN_WIDTH * SCREEN_HEIGHT];

// Legacy Opcodes and Quirks
bool Legacy_Fx55_Fx65; 		// Enable original Chip-8 Fx55 and Fx65 opcodes (increases I)
bool Legacy_8xy6_8xyE;		// Enable original Chip-8 8xy6 and 8xyE opcodes
bool FX1E_spacefight2091;	// FX1E undocumented feature needed by Spacefight 2091!
bool DXYN_bowling_wrap;		// DXYN sprite wrap in Bowling game
// Resize_Quirk_00FE_00FF		bool	= true		// Resize_Quirk_00FE_00FF - Clears the screen - Must be set to True always
bool DXY0_loresWideSpriteQuirks;	// DXY0_loresWideSpriteQuirks - Draws a 16x16 sprite even in low-resolution (64x32) mode, row-major
// scrollQuirks_00CN_00FB_00FC	bool	= false		// Shift only 2 lines
// ETI660_64x32_screen		bool = false		// Enable screen adjustment to 64x32 instead of default 64x48 ETI-660 HW
// Keyboard_slow_press		bool = false		// Used by some programs that needs a slower key press rate
// Screen Size
unsigned char SizeX;		// Number of Columns in Graphics
unsigned char SizeY;		// Number of Lines in Graphics